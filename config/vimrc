set nocompatible

" TextEdit might fail if hidden is not set.
set hidden

call plug#begin('~/.vim/plugged')

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf.vim'
Plug 'gruvbox-community/gruvbox'
Plug 'mhartington/oceanic-next'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'ryanoasis/vim-devicons'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ayu-theme/ayu-vim'
Plug 'ghifarit53/tokyonight-vim'

call plug#end()

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" set signcolumn=number

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Fuzzysearch files and code
nnoremap <C-p> :Files<Cr>
nnoremap <C-i> :Rg<Cr>

" Airline configration
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_powerline_fonts = 1

" NERDTree configuration
" Start nerdtree on vim startup
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" Bind toggling nerdtree to Ctrl+n
map <C-n> :NERDTreeToggle<CR>

" Auto close nerdtree when other tabs are closed
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Enable syntax highlighting
syntax on

" Highlight current line
hi CursorLine cterm=NONE ctermbg=8 ctermfg=NONE
set cursorline

" Show relative line numbers
set nu
set relativenumber

" Close buffers with 'q'
nnoremap <leader>q :bp\|bd #<CR>

" Show matched patterns
set hlsearch

" Turn off highlighting matched patterns with space
:nnoremap <silent> ,<Space> :nohlsearch<Bar>:echo<CR>

" Better split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set encoding=utf-8  " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.

" Lets begin ugly WTF section :)
" Set colorscheme
packloadall
let g:onedark_termcolors=256
set termguicolors
syntax on
colorscheme tokyonight
set background=dark
let g:tokyonight_style = 'night' " available: night, storm
let g:tokyonight_enable_italic = 1
let g:airline_theme='tokyonight'
let g:oceanic_next_terminal_bold = 1
let g:oceanic_next_terminal_italic = 1

" Show unwanted whitespaces
highlight ExtraWhitespace ctermbg=lightred guibg=lightred
match ExtraWhitespace /\s\+$/

" Case insensitive search
set ignorecase
set incsearch
set smartcase


set updatetime=100
let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_auto_colors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=grey ctermbg=3
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

" Ansible yaml syntax
au BufRead,BufNewFile */ansible/*.yml set filetype=yaml.ansible

" Intendation
set autoindent
set smartindent
set expandtab
set tabstop=2

" Show whitespaces
set listchars=tab:→\ ,eol:¬,trail:~,extends:>,precedes:<
set list

" FZF mapping
nnoremap <leader>f :FZF<CR>

" Show commands when typing
set showcmd

" Mergetool mappings
if &diff
    map <leader>1 :diffget LOCAL<CR>
    map <leader>2 :diffget BASE<CR>
    map <leader>3 :diffget REMOTE<CR>
endif

" Set jenkinsfiles as groovy
" au BufRead,BufNewFile Jenkinsfile* setfiletype groovy
au BufRead,BufNewFile *groovy* setfiletype groovy

" Set vim backp
set backup

" Set better folding
" setlocal foldmethod=syntax
autocmd BufRead,BufNewFile *.py setlocal foldmethod=indent filetype=python
filetype plugin indent on
" autocmd Filetype * AnyFoldActivate

" Python indentation
autocmd FileType python set expandtab tabstop=4 softtabstop=4 shiftwidth=4 syntax=python
set shiftwidth=2

set foldlevel=99
let g:omni_sql_no_default_maps = 1

let g:rainbow_active = 1

noremap <F5> :set list!<CR>:set number!<CR>:set relativenumber!<CR>

" coc
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

command! -nargs=0 Format :call CocAction('format')

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
